package domain

import (
	"encoding/json"
	"github.com/adisazhar123/go-ciba/util"
	"time"
)

type CibaSession struct {
	// This is a unique identifier to identify the authentication request made by the client
	AuthReqId string
	// This is the client application identifier binded to this Ciba session
	ClientId string
	// This is the user identifier the Ciba session is targeting
	UserId string
	// This is the user identifier the Ciba session is targeting
	// as of now only works for static user identifier e.g. user id, email etc.
	Hint string
	// This is the binding message/ code to bind session between consumption device/ client application
	// and authentication device.
	BindingMessage string
	// This is the client notification token that is generated by the client
	// that is used by the Ciba server to communicate as authorization bearer.
	// For token modes ping and push.
	ClientNotificationToken string
	// When the Ciba session (authentication request id) will expire in seconds after the session is created.
	ExpiresIn int
	// The minimum interval rate for poll token requests. Only for token mode poll.
	Interval *int
	// The validity of the Ciba session.
	Valid bool
	// The id token for this Ciba session.
	IdToken string
	// The consent status of this Ciba session (consented/ not consented).
	// User at the authentication device is in charge of the consent.
	Consented *bool
	// The scope requested for this Ciba session.
	Scope string
	// The latest time a token was requested using this Ciba session.
	LatestTokenRequestedAt int // in unix timestamp
	// The time when this Ciba session was created.
	CreatedAt time.Time
}

func (cs *CibaSession) IsTimeExpired() bool {
	t := int(cs.CreatedAt.Unix()) + cs.ExpiresIn
	now := int(time.Now().Unix())
	return now > t
}

func generateAuthReqId() string {
	return util.GenerateRandomString()
}

func NewCibaSession(clientApp *ClientApplication, hint, bindingMessage, clientNotificationToken, scope string, expiresIn int, interval *int) *CibaSession {
	if clientApp.TokenMode != ModePoll {
		interval = nil
	}
	return &CibaSession{
		Hint:                    hint,
		ClientNotificationToken: clientNotificationToken,
		Scope:                   scope,
		BindingMessage:          bindingMessage,
		AuthReqId:               generateAuthReqId(),
		ExpiresIn:               expiresIn,
		Interval:                interval,
		CreatedAt:               time.Now(),
	}
}

func (cs *CibaSession) MarshalBinary() ([]byte, error) {
	return json.Marshal(cs)
}

func (cs *CibaSession) UnmarshalBinary(data []byte) error {
	if err := json.Unmarshal(data, &data); err != nil {
		return err
	}

	return nil
}
